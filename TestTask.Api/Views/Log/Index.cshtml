@{
    ViewData["Title"] = "Logs Page";
}
<link
    rel="styleSheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-grid/4.8.1/ui-grid.min.css"
/>
<div
    ng-app="myApp"
    ng-controller="LogsController"
    class="p-5 d-flex flex-column gap-3"
>
    <div
        class="grid"
        id="logsGrid"
        ui-grid="gridOptions"
        ui-grid-infinite-scroll
        ui-grid-resize-columns
        ui-grid-move-columns
    >
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/2.5.0/ui-bootstrap-tpls.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-grid/4.8.1/ui-grid.min.js"></script>
<script>
    let myApp = angular.module('myApp',
        [
            'ui.grid',
            'ui.grid.infiniteScroll',
            'ui.grid.resizeColumns',
            'ui.grid.moveColumns',
            'ui.bootstrap'
        ]);

    myApp.controller('LogsController', function ($http, $scope, uiGridConstants) {
        $scope.page = 1;
        $scope.pageSize = 20;
        $scope.items = [];
        $scope.isFiltersEnabled = true;
        $scope.dateFrom = '';
        $scope.dateTo = '';
        $scope.entityType = null;
        $scope.possibleEntityTypes = [];
        $scope.user = '';
        let isLoading = false;

        $scope.gridOptions = {
            data: 'items',
            enableFiltering: $scope.isFiltersEnabled,
            useExternalFiltering: true,
            enableColumnResizing: true,
            infiniteScrollRowsFromEnd: 20,
            infiniteScrollDown: true,
            columnDefs: [
                {
                    field: 'id',
                    displayName: 'Id',
                    enableFiltering: false
                },
                {
                    field: 'user',
                    displayName: 'User',
                },
                {
                    field: 'dateTime',
                    displayName: 'DateTime',
                    type: 'date',
                    cellFilter: 'date:"yyyy-MM-dd"',
                    filters: [
                        {},
                        {}
                    ],
                    filterHeaderTemplate: `
                      <div class="ui-grid-filter-container">
                        <div>From:
                          <input type="text"
                                 class="form-control input-sm"
                                 uib-datepicker-popup="yyyy-MM-dd"
                                 ng-model="col.filters[0].term"
                                 is-open="col.filters[0].isOpen"
                                 ng-focus="col.filters[0].isOpen = true"
                                 datepicker-append-to-body="true"
                                 datepicker-options="{ startingDay: 1 }"/>
                        </div>
                        <div>To:
                          <input type="text"
                                 class="form-control input-sm"
                                 uib-datepicker-popup="yyyy-MM-dd"
                                 ng-model="col.filters[1].term"
                                 is-open="col.filters[1].isOpen"
                                 ng-focus="col.filters[1].isOpen = true"
                                 datepicker-append-to-body="true"
                                 datepicker-options="{ startingDay: 1 }"/>
                        </div>
                      </div>`,
                },
                {
                    field: 'recordType',
                    displayName: 'RecordType',
                    enableFiltering: false
                },
                {
                    field: 'comment',
                    displayName: 'Comment',
                    enableFiltering: false
                },
                {
                    field: 'logGuid',
                    displayName: 'LogGuid',
                    enableFiltering: false
                },
                {
                    field: 'logGuidLinked',
                    displayName: 'LogGuidLinked',
                    enableFiltering: false
                },
                {
                    field: 'entity',
                    displayName: 'Entity Type',
                    filter: {
                        type: uiGridConstants.filter.SELECT,
                        selectOptions: [],
                    },
                },
                {
                    field: 'eventInfo',
                    displayName: 'EventInfo',
                    enableFiltering: false
                },
                {
                    field: 'fieldName',
                    displayName: 'FieldName',
                    enableFiltering: false
                },
                {
                    field: 'oldValue',
                    displayName: 'OldValue',
                    enableFiltering: false
                },
                {
                    field: 'newValue',
                    displayName: 'NewValue',
                    enableFiltering: false
                },
            ],
            onRegisterApi: function (gridApi) {
                gridApi.infiniteScroll.on.needLoadMoreData($scope, $scope.loadMoreLogs);
                $scope.gridApi = gridApi;

                gridApi.core.on.filterChanged($scope, function () {
                    const grid = this.grid;

                    const userFilter = grid.columns.find(c => c.field === 'user')?.filters[0]?.term;
                    const entityFilter = grid.columns.find(c => c.field === 'entity')?.filters[0]?.term;
                    const dateFromFilter = grid.columns.find(c => c.field === 'dateTime')?.filters[0]?.term;
                    const dateToFilter = grid.columns.find(c => c.field === 'dateTime')?.filters[1]?.term;

                    $scope.user = userFilter || '';
                    $scope.entityType = entityFilter || '';
                    $scope.dateFrom = dateFromFilter ? new Date(dateFromFilter).toISOString().split('T')[0] : '';
                    $scope.dateTo = dateToFilter ? new Date(dateToFilter).toISOString().split('T')[0] : '';

                    $scope.refreshLogs();
                });
            }
        };

        $scope.getLogs = (page, pageSize, dateFrom, dateTo, entityType, user) => {
            return $http.get('Log/Get', {
                params: {
                    page, pageSize,
                    dateFrom, dateTo,
                    entityType, user
                }
            })
                .then(response => response.data.logs);
        }

        const loadLogs = (append) => {
            if (isLoading) return;
            isLoading = true;

            const pageToFetch = append ? $scope.page : 1;

            $scope.getLogs(
                pageToFetch, $scope.pageSize,
                $scope.dateFrom, $scope.dateTo,
                $scope.entityType, $scope.user
            )
                .then(logs => {
                    if (append) {
                        $scope.items = $scope.items.concat(logs);
                        $scope.page++;
                    } else {
                        $scope.items = logs;
                        $scope.page = 2;
                    }

                    if (logs.length < $scope.pageSize)
                        $scope.gridApi.infiniteScroll.dataLoaded(true);
                    else
                        $scope.gridApi.infiniteScroll.dataLoaded(false);

                    updateFilters();
                })
                .catch(error => {
                    console.error('Ошибка:', error)
                    $scope.gridApi.infiniteScroll.dataLoaded(true)
                })
                .finally(() => {
                    isLoading = false;
                })
        }

        $scope.refreshLogs = () => loadLogs(false);
        $scope.loadMoreLogs = () => loadLogs(true);

        $scope.toggleFiltering = () => {
            $scope.gridOptions.enableFiltering = $scope.isFiltersEnabled;

            $scope.gridOptions.columnDefs.forEach(col => {
                col.enableFiltering = $scope.isFiltersEnabled;
            });

            $scope.gridApi.core.notifyDataChange('column');
        };

        const updateFilters = () => {
            const newEntityItems = Array.from(new Set($scope.items.map(item => item.entity)));
            if (newEntityItems.length > $scope.possibleEntityTypes)
                $scope.possibleEntityTypes = newEntityItems;

            const entityColumn = $scope.gridApi.grid.columns.find(c => c.field === 'entity');
            if (entityColumn) {
                entityColumn.enableFiltering = $scope.isFiltersEnabled;
                entityColumn.filter.selectOptions = $scope.possibleEntityTypes.map(v => ({value: v, label: v}))
            }
        }

        $scope.refreshLogs()
    })
</script>
